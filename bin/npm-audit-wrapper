#!/usr/bin/env ruby

# This is just a stub binary for dev/debug purposes. It runs the NPMAudit
# scanner against the current directoy, using the list of exceptions passed in
# the first command line argument, or the exceptions listed in salus.yaml
# (if present). The scan's STDOUT is echoed verbatim.
# usage:
#   ~/path/to/salus/bin/npm-audit-wrapper
# or
#   ~/path/to/salus/bin/npm-audit-wrapper 13,37,42

lib = File.expand_path('../lib', __dir__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'salus'
require 'yaml'

def parse_exceptions_from_argv(string)
  return if string.nil?
  string.split(' ').flat_map { |part| part.split(',') }.map(&:strip)
end

def read_exceptions_from_config
  YAML.load_file('salus.yaml')['scanner_configs']['NPMAudit']['exceptions'].map do |ex|
    ex['advisory_id']
  end
rescue StandardError
  nil
end

exceptions = parse_exceptions_from_argv(ARGV[0]) || read_exceptions_from_config || []
exceptions = exceptions.map do |ex|
  { 'advisory_id' => ex }
end

config = { 'exceptions' => exceptions }

repo = Salus::Repo.new('.')
report = Salus::Report.new

scanner = Salus::Scanners::NPMAudit.new(repository: repo, report: report, config: config)
scanner.run

npm_audit_report = report.to_h.fetch(:scans).fetch('NPMAudit')

print(npm_audit_report.fetch('stdout'))

exit_code = (npm_audit_report.fetch('passed') ? 0 : 1)
exit(exit_code)
